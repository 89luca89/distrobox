#!/bin/sh
# POSIX
# Expected env variables:
#	HOME
#	USER
# Optional env variables:
#	DBX_CONTAINER_ALWAYS_PULL
#	DBX_CONTAINER_CUSTOM_HOME
#	DBX_CONTAINER_GENERATE_ENTRY
#	DBX_CONTAINER_HOME_PREFIX
#	DBX_CONTAINER_HOSTNAME
#	DBX_CONTAINER_IMAGE
#	DBX_CONTAINER_MANAGER
#	DBX_CONTAINER_NAME
#	DBX_CONTAINER_CLEAN_PATH
#	DBX_NON_INTERACTIVE
#	DBX_VERBOSE
#	DBX_SKIP_WORKDIR
#	DBX_SUDO_PROGRAM

# Ensure we have our env variables correctly set
[ -z "${USER}" ] && USER="$(id -run)"
[ -z "${HOME}" ] && HOME="$(getent passwd "${USER}" | cut -d':' -f6)"
[ -z "${SHELL}" ] && SHELL="$(getent passwd "${USER}" | cut -d':' -f7)"

check_rsync() {
    if [ -e "/usr/bin/rsync" ]; then
        # rsync is installed, do nothing
        return 0
    else
        # rsync is not installed, print message
        printf "Install rsync to continue\n"
        return 1
    fi
}


case "${container_manager}" in
	autodetect)
		if command -v podman > /dev/null; then
			container_manager="podman"
		elif command -v podman-launcher > /dev/null; then
			container_manager="podman-launcher"
		elif command -v docker > /dev/null; then
			container_manager="docker"
		elif command -v lilipod > /dev/null; then
			container_manager="lilipod"
		fi
		;;
	podman)
		container_manager="podman"
		;;
	podman-launcher)
		container_manager="podman-launcher"
		;;
	lilipod)
		container_manager="lilipod"
		;;
	docker)
		container_manager="docker"
		;;
	*)
		printf >&2 "Invalid input %s.\n" "${container_manager}"
		printf >&2 "The available choices are: 'autodetect', 'podman', 'docker', 'lilipod'\n"
		;;
esac

clone_export(){
container_manager export CONTAINER_ID -o /tmp/container.tar

printf "enter receivers address (username@host)"
read -r address

rsync --progress /tmp/container.tar "${address}":/tmp/container.tar

rm /tmp/container.tar
}

clone_import(){
    # Call check_rsync and discard its output
    if check_rsync > /dev/null 2>&1; then
        # If check_rsync returns 0, continue with the rest of the function
        echo "rsync is available. Proceeding with the task..."
        # Place your code here for the task that needs rsync
    else
        # If check_rsync returns non-zero, handle the error
        echo "Cannot proceed because rsync is not installed."
        exit 1
    fi

    

}