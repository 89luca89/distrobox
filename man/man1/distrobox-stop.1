.\
.\"
.TH "DISTROBOX\-STOP" "1" "Jan 2025" "Distrobox" "User Manual"
.SH NAME
.IP
.EX
distrobox stop
distrobox\-stop
.EE
.SH DESCRIPTION
distrobox\-stop stop a running distrobox.
.PP
Distroboxes are left running, even after exiting out of them, so that
subsequent enters are really quick.
This is how they can be stopped.
.SH SYNOPSIS
\f[B]distrobox stop\f[R]
.IP
.EX
\-\-all/\-a:       stop all distroboxes
\-\-yes/\-Y:       non\-interactive, stop without asking
\-\-help/\-h:      show this message
\-\-root/\-r:      launch podman/docker/lilipod with root privileges. Note that if you need root this is the preferred
            way over \[dq]sudo distrobox\[dq] (note: if using a program other than \[aq]sudo\[aq] for root privileges is necessary,
            specify it through the DBX_SUDO_PROGRAM env variable, or \[aq]distrobox_sudo_program\[aq] config variable)
\-\-verbose/\-v:       show more verbosity
\-\-version/\-V:       show version
.EE
.SH EXAMPLES
.IP
.EX
distrobox\-stop container\-name1 container\-name2
distrobox\-stop container\-name
distrobox\-stop \-\-all
.EE
.PP
You can also use environment variables to specify container manager and
name:
.IP
.EX
DBX_CONTAINER_MANAGER=\[dq]docker\[dq] DBX_CONTAINER_NAME=test\-alpine distrobox\-stop
.EE
.SH ENVIRONMENT VARIABLES
.IP
.EX
DBX_CONTAINER_MANAGER
DBX_CONTAINER_NAME
DBX_NON_INTERACTIVE
DBX_SUDO_PROGRAM
.EE
