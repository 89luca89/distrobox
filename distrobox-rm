#!/bin/sh
# SPDX-License-Identifier: GPL-3.0-only
#
# This file is part of the distrobox project:
#    https://github.com/89luca89/distrobox
#
# Copyright (C) 2021 distrobox contributors
#
# distrobox is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 3
# as published by the Free Software Foundation.
#
# distrobox is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with distrobox; if not, see <http://www.gnu.org/licenses/>.

# POSIX
# Optional env variables:
#	DBX_CONTAINER_MANAGER
#   DBX_CONTAINER_NAME
#   DBX_NON_INTERACTIVE
#	DBX_SUDO_PROGRAM

# Dont' run this command as sudo.
if [ "$(id -u)" -eq 0 ]; then
	printf >&2 "Running %s as sudo is not supported.\n" "$(basename "${0}")"
	printf >&2 " try instead running:\n"
	printf >&2 "	%s --root %s\n" "$(basename "${0}")" "$*"
	exit 1
fi

# Common to all
container_manager="autodetect"
distrobox_sudo_program="sudo"
dryrun=0
non_interactive=0
rootful=0
verbose=0
version="1.4.1"
# Defaults
force=0

# Load configurations, we use a "lib" for it, let's source it
# shellcheck disable=SC1090 disable=SC1091
. "$(dirname "$(realpath "${0}")")/../lib/distrobox/config-load"

# Load container_manager detection logic, we use a "lib" for it, let's source it
# shellcheck disable=SC1090 disable=SC1091
. "$(dirname "$(realpath "${0}")")/../lib/distrobox/container-manager"

# Declare it AFTER config sourcing because we do not want a default name set for rm.
container_name=""
container_name_list=""

# Print usage to stdout.
# Arguments:
#   None
# Outputs:
#   print usage with examples.
show_help() {
	cat << EOF
distrobox version: ${version}

Usage:

	distrobox-rm [-f/--force] container-name [container-name1 container-name2 ...]

Options:

	--name/-n:		name for the distrobox
	--root/-r:		launch podman/docker with root privileges. Note that if you need root this is the preferred
				way over "sudo distrobox" (note: if using a program other than 'sudo' for root privileges is necessary,
				specify it through the DBX_SUDO_PROGRAM env variable, or 'distrobox_sudo_program' config variable)
	--force/-f:		force removal (stop and remove)
	--yes/-Y:		assume yes to all questions
	--help/-h:		show this message
	--verbose/-v:		show more verbosity
	--version/-V:		show version
EOF
}

# Parse arguments
while :; do
	case $1 in
		-h | --help)
			# Call a "show_help" function to display a synopsis, then exit.
			show_help
			exit 0
			;;
		-r | --root)
			shift
			rootful=1
			;;
		-v | --verbose)
			verbose=1
			shift
			;;
		-V | --version)
			printf "distrobox: %s\n" "${version}"
			exit 0
			;;
		-f | --force)
			force=1
			shift
			;;
		-Y | --yes)
			non_interactive=1
			shift
			;;
		--) # End of all options.
			shift
			break
			;;
		-*) # Invalid options.
			printf >&2 "ERROR: Invalid flag '%s'\n\n" "$1"
			show_help
			exit 1
			;;
		*) # Default case: If no more options then break out of the loop.
			# If we have a flagless option and container_name is not specified
			# then let's accept argument as container_name
			if [ -n "$1" ]; then
				container_name_list="${container_name_list} $1"
				shift
			else
				break
			fi
			;;
	esac
done

set -o errexit
set -o nounset
# set verbosity
if [ "${verbose}" -ne 0 ]; then
	set -o xtrace
fi

# Detect the container manager using the function in the container-manager lib
container_manager="$(detect_container_manager \
	"${container_manager}" \
	"${dryrun}" \
	"${rootful}" \
	"${verbose}" \
	"${distrobox_sudo_program}")"

# check if we have containers to delete
if [ -z "${container_name_list}" ]; then
	printf >&2 "Please specify a container name.\n"
	exit 1
fi

for container_name in ${container_name_list}; do
	# Inspect the container we're working with.
	container_status="$(${container_manager} inspect --type container \
		"${container_name}" --format '{{.State.Status}}')"
	container_exists="$?"
	# Does the container exist? check if inspect reported errors
	if [ "${container_exists}" -gt 0 ]; then
		# If not, prompt to create it first
		printf >&2 "Cannot find container %s, does it exist?\n" "${container_name}"
		exit 1
	fi

	# If the container is not already running, we need to start if first
	if [ "${container_status}" = "running" ]; then
		if [ "${force}" -ne 0 ]; then
			printf >&2 "Stopping container %s\n" "${container_name}"
			if ! ${container_manager} stop "${container_name}"; then
				printf >&2 "Could not stop container %s\n" "${container_name}"
				printf >&2 "Please stop container %s before deletion\n" "${container_name}"
				printf >&2 "Run:\n\t%s stop %s" "${container_manager}" "${container_name}"
				exit 1
			fi
		else
			printf >&2 "Please stop container %s before deletion\n" "${container_name}"
			printf >&2 "Run:\n\t%s stop %s\n" "${container_manager}" "${container_name}"
			printf >&2 'or use the "--force" flag'
			exit 1
		fi
	fi
	if [ "${non_interactive}" -eq 0 ] && [ "${force}" -eq 0 ]; then
		# Prompt to download it.
		printf "Do you really want to delete %s? [Y/n]: " "${container_name}"
		read -r response
		response="${response:-"Y"}"
	else
		response="yes"
	fi

	# Accept only y,Y,Yes,yes,n,N,No,no.
	case "${response}" in
		y | Y | Yes | yes | YES)
			# We're going to deleted the box, let's also delete the entry
			if [ "${rootful}" -eq 0 ]; then
				"$(dirname "$(realpath "${0}")")/distrobox-generate-entry" "${container_name}" --delete
			fi

			# Remove the container
			${container_manager} rm "${container_name}"
			;;
		n | N | No | no | NO)
			printf "Aborted.\n"
			exit 0
			;;
		*) # Default case: If no more options then break out of the loop.
			printf >&2 "Invalid input.\n"
			printf >&2 "The available choices are: y,Y,Yes,yes,YES or n,N,No,no,NO.\nExiting.\n"
			exit 1
			;;
	esac
done
