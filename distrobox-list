#!/bin/sh
# SPDX-License-Identifier: GPL-3.0-only
#
# This file is part of the distrobox project:
#    https://github.com/89luca89/distrobox
#
# Copyright (C) 2021 distrobox contributors
#
# distrobox is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 3
# as published by the Free Software Foundation.
#
# distrobox is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with distrobox; if not, see <http://www.gnu.org/licenses/>.

# POSIX
# Optional env variables:
#	DBX_CONTAINER_MANAGER
#	DBX_SUDO_PROGRAM

# Dont' run this command as sudo.
if [ "$(id -u)" -eq 0 ]; then
	printf >&2 "Running %s as sudo is not supported.\n" "$(basename "${0}")"
	printf >&2 " try instead running:\n"
	printf >&2 "	%s --root %s\n" "$(basename "${0}")" "$*"
	exit 1
fi

# Common to all
container_manager="autodetect"
distrobox_sudo_program="sudo"
dryrun=0
non_interactive=0
rootful=0
verbose=0
version="1.4.1"
# Defaults
no_color=0

# Load configurations, we use a "lib" for it, let's source it
# shellcheck disable=SC1090 disable=SC1091
. "$(dirname "$(realpath "${0}")")/../lib/distrobox/config-load"

# Load container_manager detection logic, we use a "lib" for it, let's source it
# shellcheck disable=SC1090 disable=SC1091
. "$(dirname "$(realpath "${0}")")/../lib/distrobox/container-manager"

# Print usage to stdout.
# Arguments:
#   None
# Outputs:
#   print usage with examples.
show_help() {
	cat << EOF
distrobox version: ${version}

Usage:

	distrobox-list

Options:

	--help/-h:		show this message
	--no-color:		disable color formatting
	--root/-r:		launch podman/docker with root privileges. Note that if you need root this is the preferred
				way over "sudo distrobox" (note: if using a program other than 'sudo' for root privileges is necessary,
				specify it through the DBX_SUDO_PROGRAM env variable, or 'distrobox_sudo_program' config variable)
	--verbose/-v:		show more verbosity
	--version/-V:		show version
EOF
}

# Parse arguments
while :; do
	case $1 in
		-h | --help)
			# Call a "show_help" function to display a synopsis, then exit.
			show_help
			exit 0
			;;
		--no-color)
			shift
			no_color=1
			;;
		-r | --root)
			shift
			rootful=1
			;;
		-v | --verbose)
			verbose=1
			shift
			;;
		-V | --version)
			printf "distrobox: %s\n" "${version}"
			exit 0
			;;
		--) # End of all options.
			shift
			break
			;;
		-*) # Invalid options.
			printf >&2 "ERROR: Invalid flag '%s'\n\n" "$1"
			show_help
			exit 1
			;;
		*) # Default case: If no more options then break out of the loop.
			break ;;
	esac
done

set -o errexit
set -o nounset
# set verbosity
if [ "${verbose}" -ne 0 ]; then
	set -o xtrace
fi

# Detect the container manager using the function in the container-manager lib
container_manager="$(detect_container_manager \
	"${container_manager}" \
	"${dryrun}" \
	"${rootful}" \
	"${verbose}" \
	"${distrobox_sudo_program}")"

# List containers using custom format that inclused MOUNTS
# we do this as we can detect the custom mounts done by distrobox to distringuish
# between a normal podman or docker container and a distrobox one.
container_list=$(${container_manager} ps -a --no-trunc --format \
	"{{.ID}}|{{.Image}}|{{.Names}}|{{.State}}|{{.Labels}}{{.Mounts}}")
printf "%-12s | %-20s | %-30s | %-30s\n" "ID" "NAME" "STATUS" "IMAGE"
IFS='
'

# if we're in not a tty, don't use colors
GREEN=""
YELLOW=""
CLEAR=""
if [ -t 0 ] && [ "${no_color}" -ne 1 ]; then
	# we're in a tty, use colors
	GREEN='\033[32m'
	YELLOW='\033[33m'
	CLEAR='\033[0m'
fi
# Header of the output
for container in ${container_list}; do
	# Check if the current container has a custom mount point for distrobox.
	if [ -z "${container##*distrobox*}" ]; then

		# Extract the information for the single container to pretty print it
		container_id="$(printf "%s" "${container}" | cut -d'|' -f1 | cut -c1-12)"
		container_image="$(printf "%s" "${container}" | cut -d'|' -f2)"
		container_name="$(printf "%s" "${container}" | cut -d'|' -f3)"
		container_status="$(printf "%s" "${container}" | cut -d'|' -f4)"

		# If the container is Up and Running, print it in green and go next.
		if [ -z "${container_status##*Up*}" ] || [ -z "${container_status##*running*}" ]; then
			# echo -e is not defined in posix, and printing with %s will not work
			# for colors, so we're disabling this lint for color prints.
			# shellcheck disable=SC2059
			printf "${GREEN}"
		else
			# shellcheck disable=SC2059
			printf "${YELLOW}"
		fi
		# print it in yellow if not Running
		printf "%-12s | %-20s | %-30s | %-40s\n" \
			"${container_id}" "${container_name}" "${container_status}" "${container_image}"
	fi
	# shellcheck disable=SC2059
	printf "${CLEAR}"
done
